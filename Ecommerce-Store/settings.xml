<?xml version="1.0" encoding="UTF-8"?>
<con:interface xsi:type="con:RestService" basePath="/Adrians_Org/ecommerce-store/1.1.0" definitionUrl="C:\Users\adrian.minnock\OneDrive - SmartBear Software, Inc\API Definitions\Ecommerce Store.json" id="6b426af3-6c1d-40bd-b552-d42d79286378" name="Ecommerce Store" type="rest_ex" wadlVersion="https://swagger.io/swagger2/specification" xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>## This is an API definition to be used in an automated design first workflow.
   We will reuse this API definition to create our functional tests and a virtual API.
</con:description><con:settings><con:setting id="6b426af3-6c1d-40bd-b552-d42d79286378fileName">Ecommerce-Store</con:setting></con:settings><con:definitionCache rootPart="file:/C:/Users/adrian.minnock/OneDrive%20-%20SmartBear%20Software,%20Inc/API%20Definitions/Ecommerce%20Store.json" type="TEXT"><con:part><con:url>file:/C:/Users/adrian.minnock/OneDrive%20-%20SmartBear%20Software,%20Inc/API%20Definitions/Ecommerce%20Store.json</con:url><con:content>{
  "swagger": "2.0",
  "info": {
    "description": "## This is an API definition to be used in an automated design first workflow.\n   We will reuse this API definition to create our functional tests and a virtual API.\n",
    "version": "1.1.0",
    "title": "Ecommerce Store",
    "termsOfService": "http://smartbear.com",
    "contact": {
      "email": "adrian.minnock@smartbear.com"
    },
    "license": {
      "name": "Private License",
      "url": "http://smartbear.com"
    },
    "x-tag": "example2"
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/Adrians_Org/ecommerce-store/1.1.0",
  "tags": [
    {
      "name": "User",
      "description": "Operations used to login, logout and get user details."
    },
    {
      "name": "Orders",
      "description": "Operations available to regular development, integration, test teams."
    },
    {
      "name": "Payments",
      "description": "Operations dependent on third party service."
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/login/": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Login to user account",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basic": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/login"
              }
            }
          },
          "404": {
            "description": "Page not found"
          }
        }
      }
    },
    "/logout/": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Logout current user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "security": [
          {
            "basic": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/logout"
              }
            }
          },
          "404": {
            "description": "Page not found"
          }
        }
      }
    },
    "/user_details/": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "View user details",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token used for authentication",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basic": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user_details"
              }
            }
          },
          "404": {
            "description": "Page not found"
          }
        }
      }
    },
    "/get_products/{product_id}/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Get list of all products",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "id number of product",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token used for authentication",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basic": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/products"
              }
            }
          },
          "400": {
            "description": "Invalid product ID"
          },
          "404": {
            "description": "Page not found"
          }
        }
      }
    },
    "/get_orders/{order_id}/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "description": "Get list of all orders for the user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "id number for each number",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token used for authentication",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basic": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/get_orders"
              }
            }
          },
          "400": {
            "description": "Invalid order ID"
          },
          "404": {
            "description": "Page not found"
          }
        }
      }
    },
    "/post_order/": {
      "post": {
        "tags": [
          "Orders"
        ],
        "description": "Creates a new order in DB",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "POSTDATA",
            "description": "Details of new order",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/shoppingcart"
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token used for authentication",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basic": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/post_orders"
              }
            }
          },
          "400": {
            "description": "Invalid order details"
          },
          "404": {
            "description": "Page not found"
          }
        }
      }
    },
    "/payments/creditcard/": {
      "post": {
        "tags": [
          "Payments"
        ],
        "description": "External Service to make Creditcard payments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "POSTDATA",
            "description": "Creates a payment using a credit card",
            "required": false,
            "schema": {
              "$ref": "#/definitions/card_details"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token used for authentication",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basic": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "description": "Invalid card details"
          },
          "404": {
            "description": "Page not found"
          }
        }
      }
    },
    "/payments/voucher/": {
      "post": {
        "tags": [
          "Payments"
        ],
        "description": "Creates a payment using voucher",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "POSTDAT",
            "description": "Allows users to enter voucher code",
            "required": false,
            "schema": {
              "$ref": "#/definitions/voucher_details"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token used for authentication",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "basic": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "description": "Invalid voucher details"
          },
          "404": {
            "description": "Page not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  },
  "definitions": {
    "payment": {
      "type": "object",
      "required": [
        "Reason",
        "Status",
        "Status Code"
      ],
      "properties": {
        "Status": {
          "type": "string",
          "example": "Transaction Approved",
          "description": "Status of transaction"
        },
        "Reason": {
          "type": "string",
          "example": "Approved",
          "description": "Status Readon"
        },
        "Status Code": {
          "type": "integer",
          "example": 100,
          "description": "Status code for the tramsaction"
        }
      }
    },
    "shoppingcart": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "integer",
          "example": 1,
          "description": "Product Quantity"
        },
        "product_id": {
          "type": "integer",
          "example": 1,
          "description": "Product Id"
        }
      }
    },
    "products": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1,
          "description": "Product id"
        },
        "name": {
          "type": "string",
          "example": "iPhone",
          "description": "Product Name"
        },
        "description": {
          "type": "string",
          "example": "This is an iphone 8",
          "description": "Product Description"
        },
        "image": {
          "type": "string",
          "example": "iphone.jpg",
          "description": "Product Image"
        },
        "price": {
          "type": "number",
          "example": 799,
          "description": "Price of the product"
        },
        "created": {
          "type": "string",
          "example": "August",
          "description": "Date time of creation"
        },
        "modified": {
          "type": "string",
          "example": "September",
          "description": "Date time of creation"
        },
        "status": {
          "type": "integer",
          "example": "1 or 0",
          "description": "Status of the user"
        }
      }
    },
    "login": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Login successful",
          "description": "Login message"
        },
        "name": {
          "type": "string",
          "example": "John",
          "description": "Users first name"
        },
        "last_name": {
          "type": "string",
          "example": "Smith",
          "description": "Users last name"
        },
        "auth_token": {
          "type": "string",
          "example": "Bearer 12345689123456789",
          "description": "Authorization token used for requests"
        }
      }
    },
    "logout": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Logout successful",
          "description": "Logout message"
        },
        "status": {
          "type": "integer",
          "example": 1,
          "description": "login status of user"
        }
      }
    },
    "user_details": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1,
          "description": "User id"
        },
        "name": {
          "type": "string",
          "example": "John",
          "description": "Users first name"
        },
        "last_name": {
          "type": "string",
          "example": "Smith",
          "description": "Users last name"
        },
        "email": {
          "type": "string",
          "example": "john.smith@example.com",
          "description": "Users email"
        },
        "phone": {
          "type": "integer",
          "example": 871234567,
          "description": "users phone number"
        },
        "address": {
          "type": "string",
          "example": "Galway, Ireland",
          "description": "Users address"
        }
      }
    },
    "get_orders": {
      "type": "object",
      "properties": {
        "order_id": {
          "type": "integer",
          "example": 1,
          "description": "Order's ID"
        },
        "customer_id": {
          "type": "integer",
          "example": 1,
          "description": "Customer ID"
        },
        "total_price": {
          "type": "number",
          "example": 799,
          "description": "Total Order Price"
        },
        "status": {
          "type": "integer",
          "example": 0,
          "description": "Status of the order for internal use."
        },
        "items": {
          "type": "integer",
          "example": 1,
          "description": "Quantity"
        },
        "image": {
          "type": "string",
          "example": "iphone.jpeg",
          "description": "Image of the product"
        },
        "paymenttype": {
          "type": "string",
          "example": "card",
          "description": "Order payment method"
        }
      }
    },
    "post_orders": {
      "type": "object",
      "properties": {
        "Order ID": {
          "type": "integer",
          "example": 298,
          "description": "Order ID"
        },
        "Order Item ID": {
          "type": "integer",
          "example": 643,
          "description": "Product Id"
        },
        "Item Total Price": {
          "type": "number",
          "example": 1998,
          "description": "Total price of item"
        },
        "Total Order Price": {
          "type": "number",
          "example": 3996,
          "description": "Total price of the order"
        }
      }
    },
    "voucher_details": {
      "type": "object",
      "properties": {
        "voucer_code": {
          "type": "integer",
          "example": 33,
          "description": "Order ID"
        },
        "purchase_date": {
          "type": "string",
          "example": "January 2020",
          "description": "Date voucher was purchased"
        },
        "expiry_date": {
          "type": "string",
          "example": "December 2020",
          "description": "Expiry date of voucher"
        }
      }
    },
    "card_details": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 33,
          "description": "Order ID"
        },
        "action": {
          "type": "string",
          "example": "placeOrdercc",
          "description": "placeOrdercc"
        },
        "cc_money": {
          "type": "number",
          "example": 798,
          "description": "Order amount"
        },
        "cc_name": {
          "type": "string",
          "example": "S S",
          "description": "Cardholders name"
        },
        "cc_number": {
          "type": "integer",
          "example": 9234123412341234,
          "description": "cc number"
        },
        "cc_exp_mo": {
          "type": "integer",
          "example": 1,
          "description": "cc expiry month"
        },
        "cc_exp_yr": {
          "type": "integer",
          "example": 2018,
          "description": "cc expiry year"
        },
        "cc_cvv": {
          "type": "integer",
          "example": 123,
          "description": "cc expiry year"
        }
      }
    }
  },
  "parameters": {
    "pathParam": {
      "name": "type",
      "in": "path",
      "description": "json or xml",
      "required": true,
      "type": "string"
    }
  }
}</con:content><con:type>https://swagger.io/swagger2/specification</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://localhost:8088/</con:endpoint><con:endpoint>http://virtserver.swaggerhub.com</con:endpoint><con:endpoint>https://virtserver.swaggerhub.com</con:endpoint></con:endpoints></con:interface>
